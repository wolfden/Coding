#!/usr/bin/python

	#created by wolfden
	#my first py file ever, zomg
	
	#goal: a python file that can run a system upgrade with very little human interaction
	

from datetime import datetime
import subprocess
import argparse
import sys
import time

# Add some pretty colors	
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    
# Arguments to use to optimize mirrors: run_update [--limbo] [--main] [--weekly]
parser = argparse.ArgumentParser()
parser.add_argument("--limbo", help="Optimize Limbo Repo", action="store_true")
parser.add_argument("--main", help="Optimize Main Repo", action="store_true")
parser.add_argument("--weekly", help="Optimize Weekly Repo", action="store_true")
args = parser.parse_args()
if args.limbo:
	print "Starting to Optimize Limbo Repo"
	time.sleep(1)
	limbo = subprocess.Popen('equo repo mirrorsort sabayon-limbo', shell=True)
	retval = limbo.wait()
	sys.exit()
elif args.main:
	print "Starting to Optimize Main Repo"
	time.sleep(1)
	main = subprocess.Popen('equo repo mirrorsort sabayonlinux.org', shell=True)
	retval = main.wait()
	sys.exit()
elif args.weekly:
	print "Starting to Optimize Weekly Repo"
	time.sleep(1)
	weekly = subprocess.Popen('equo repo mirrorsort sabayon-weekly', shell=True)
	retval = weekly.wait()
	sys.exit()
	
# Start Timer
startTime = datetime.now()
# Date and Time of Start
date_start = subprocess.Popen('date', shell=False)
retval = date_start.wait()
  
# Lets See What Repos We Are Using	
print bcolors.BOLD + "====Current Activated Repositories====" + bcolors.ENDC
equo_repo = subprocess.check_call("equo repo list", shell=True)

# First we need to update or make sure our Repositories are Current
print bcolors.BOLD + "====Updating the Repositories====" + bcolors.ENDC
equo_update = subprocess.check_call('equo update', shell=True)

#Syncing license.accept so we don't get prompted for license agreement
print bcolors.BOLD + "====Updating license.accept file to avoid prompts====" + bcolors.ENDC
rsync = subprocess.check_call('rsync -av -H -A -X --delete-during "rsync://rsync.at.gentoo.org/gentoo-portage/licenses/" "/usr/portage/licenses/"; ls /usr/portage/licenses -1 | xargs -0 > /etc/entropy/packages/license.accept', shell=True)

# Next we need to make sure latest entropy is installed
print bcolors.BOLD + "====Installing Latest Entropy====" + bcolors.ENDC
equo_entropy = subprocess.check_call('equo install app-admin/equo sys-apps/entropy --nodeps', shell=True)

# Next we list number of upgrades available
print bcolors.BOLD + "====Getting A Count of How Many Packages Need Upgrade or Removed====" + bcolors.ENDC
equo_upgrades_available = subprocess.check_call('equo q updates', shell=True)

# Next we start the upgrade process
print bcolors.BOLD + "====Starting to Perform Upgrade====" + bcolors.ENDC
equo_upgrade = subprocess.check_call('equo upgrade', shell=True)

# Next we check for missing dependencies
print bcolors.BOLD + "====Looking for Missing Dependencies====" + bcolors.ENDC
equo_dep = subprocess.check_call('equo deptest', shell=True)

# Next we clean up
print bcolors.BOLD + "====Running equo cleanup====" + bcolors.ENDC
equo_clean = subprocess.check_call('equo cleanup', shell=True)

print " \n"
print "========================System Information========================" 


# Gather Useful Information and Display it in Terminal
cpu = subprocess.check_call('uname -p', shell=True)
kernel_arch = subprocess.check_call('uname -m', shell=True)
release_version = subprocess.check_call('cat /etc/sabayon-release', shell=True)
release_edition = subprocess.check_call('cat /etc/sabayon-edition', shell=True)
kernel_version = subprocess.check_call('uname -r', shell=True)
nodename = subprocess.check_call('uname -n', shell=True)
print " \n"
print "~~~Mem Free~~~"
mem_free = subprocess.check_call('free -h', shell=True)
print " \n"
print "~~~Disk Space~~~"
disk_space = subprocess.check_call('df -lT --exclude-type=tmpfs --exclude-type=rootfs', shell=True)

print " \n"
print bcolors.BOLD + "This Session Has Ended Successfully" + bcolors.ENDC

# Date and Time of End
date_end = subprocess.Popen('date', shell=False)
retval = date_end.wait()
# End Timer
ctime = datetime.now() - startTime
print "Time to Complete ", ctime


print " \n"

